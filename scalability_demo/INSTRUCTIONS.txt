1) create genesis with funding for all raiden nodes (e.g. 60 nodes on three hosts):
`./config_builder.py genesis 20 10.42.10.5 10.42.10.6 10.42.10.7 > genesis.json` (edited)

[3:36]  
2) prepare the raiden smart contracts for use in custom blockchain
`sh create_compilation_dump.sh`
writes 
2.1) `state_dump.json` and 
2.2) prints `--registry_contract_address xxxxxx` + `--discovery_contract_address yyyyyyyy` for use in the raiden nodes (edited)

[3:37]  
3) merge `state_dump.json` with `genesis.json`
`./config_builder.py merge state_dump.json genesis.json > complete_genesis.json`
this will add the precompiled contracts to a new `complete_genesis.json`

[3:39]  
4) initialize (all) `geth` nodes with the genesis
`cp complete_genesis.json <datadir>/genesis.json`
`geth --datadir <datadir> init <datadir>/genesis.json`

[3:40]  
5) add a default account for the `geth` nodes
`./config_builder.py account_file > account.json`
`mkdir <datadir>/keystore && cp account.json <datadir>/keystore/1.json`

[3:42]  
6) create run commands for all `geth` nodes in the cluster
`./config_builder.py geth_commands <datadir> 10.42.10.5 10.42.10.6 10.42.10.7`
use the resulting commands from the json to run `geth` on all three nodes

[3:44]  
note: I left out the part where we operate on the remote nodes (`10.42.10.5 10.42.10.6 10.42.10.7`) in 4) and 5) -- `cp`ing files and running `init` needs to be done on the prospective hosts
