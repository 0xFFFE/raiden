- hosts: tag_Name_Scenario
  name: start geth
  remote_user: "{{ remote_user }}"
  gather_facts: true
  roles:
    - scenario
    - common
  tags:
    - start_geth

  tasks:
    # Collect instance id: http://stackoverflow.com/a/27307254
    - action: ec2_facts

    - name: install daemon
      apt:
        name: daemon
        state: present
      become: yes

    - name: stop geth (KILL)
      shell: "killall -15 geth"
      ignore_errors: yes

    - name: wipe geth blockchaindata (if present)
      file:
        path: "{{ geth_datadir }}/{{ item }}"
        state: absent
      with_items:
        - chaindata
        - dapp

    - name: init geth
      shell:
        cmd: "geth --datadir {{ geth_datadir }} init {{ geth_datadir }}/genesis.json"

      # run geth in background and redirect output to ~/geth.log
    - name: run geth command
      shell:
        cmd: "daemon -o {{ user_home }}/geth.log {{ geth_datadir }}/start.sh"


- hosts: tag_Name_Scenario
  name: start raiden
  remote_user: "{{ remote_user }}"
  gather_facts: true
  roles:
    - scenario
    - common
  tags:
    - start_raiden
  vars:
    scenario_runner: "{{ user_home }}/raiden/tools/app.py"

  tasks:
    # Collect instance id: http://stackoverflow.com/a/27307254
    - action: ec2_facts

    - name: overwrite standard raiden app.py with tools version
      copy:
        src: "../app.py"
        dest: "{{ raiden_dir }}/raiden/app.py"

    - name: configured raiden_ports
      find:
        patterns: "4*"
        paths: "{{ user_home }}"
        file_type: directory
      register: dirs

    - name: set fact for ports
      set_fact:
        raiden_ports: "{{ dirs.files | map(attribute='path') | map('basename') | list }}"

    # TODO: create directory, get timestamp, save adding timestamp to bak name
    #- name: backup old raiden log files
    #  command: "mv -f {{ user_home }}/raiden-{{ item }}.log {{ user_home }}/raiden-{{ item }}.bak"
    #  with_items:
    #    - "{{ raiden_ports }}"

    - name: expand raiden flags
      shell:
        cmd: "echo $(cat {{ user_home}}/raiden_flags.txt)"
      register: raiden_flags

    - name: execute raidens asynchronously
      command: "{{ ansible_env.HOME }}/raidenvenv/bin/python {{ raiden_dir }}/raiden/app.py {{ raiden_flags.stdout }} --privatekey_file {{ user_home }}/{{ item }}/privatekey.txt --listen_address {{ ansible_ec2_local_ipv4 }}:{{ item }} --scenario {{ user_home }}/{{ item }}/scenario.json --logfile {{ user_home }}/raiden-{{ item }}.log"
      async: 600
      poll: 0
      with_items:
        - "{{ raiden_ports }}"

- hosts: tag_Name_Scenario
  name: terminate
  remote_user: "{{ remote_user }}"
  gather_facts: true
  roles:
    - scenario
    - common
  tags:
    - terminate

  tasks:
    - include: roles/scenario/tasks/terminate.yaml
